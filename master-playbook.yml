---
- hosts: all
  become: true
  gather_facts: yes

  tasks:
  - name: Gather all facts
    setup:
        gather_subset:
          - 'all'
    register: res
  - name: Display gathered facts
    debug: var=res

  - name: Disabling SELINUX 
    selinux:
     state: disabled

  - name: Run Setenforce command
    become_method: sudo
    command: setenforce 0

  - name: Flush existing firewall rules
    become_method: sudo
    iptables:
      flush: true

  - name: Add the net bridge in sysctl
    become_method: sudo
    lineinfile:
      path: /etc/sysctl.conf
      regexp: '^net.bridge.bridge-nf-call-iptables='
      line: 'net.bridge.bridge-nf-call-iptables=1'

  - name: Add the kernel module
    become_method: sudo
    modprobe:
      name:  br_netfilter
      state: present

  - name: execute sysctl
    become_method: sudo
    command: sysctl -p


  - name: Install packages that allow yum to be used over HTTPS
    yum:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - varnish 
      - ca-certificates
      - device-mapper-persistent-data
      - curl
      - gnupg
      - lvm2
      - yum-utils


  - name: Add yum repository for stable version
    become_method: sudo
    command: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

  - name: Install docker and its dependecies
    yum: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Make sure a docker service is running
    systemd:
      state: started
      name: docker 
      enabled: yes

 
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a

  - name: Add yum kubernetes repository for stable version
    yum_repository:
      name: kubernetes 
      description: Kubernetes Repository
      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64 
      gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg 
      state: present 

  - name: Install Kubernetes binaries
    yum: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Make sure a kubelet service is running
    systemd:
      state: started
      name: kubelet 
      enabled: yes

  - name: Set  Master IP
    shell: ip a | grep -i "eth" | grep -i "inet" | grep "192" | awk '{print $2}' | awk -F'/' '{print $1}'
    register: masterip

  - name: Get Master Ip
    shell: echo "master ip is " {{ masterip.stdout }} 

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="{{ masterip.stdout }}" --apiserver-cert-extra-sans="{{ masterip.stdout }}"  --node-name k8s.master.com --pod-network-cidr=192.168.0.0/16
    register: k8scluster
  
  - name:  output of K8s cluster
    debug:
        msg: "{{ k8scluster.stdout | to_nice_yaml }}"

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config 

  - name: Install calico pod network
    command: kubectl create -f https://docs.projectcalico.org/v3.4/getting-started/kubernetes/installation/hosted/calico.yaml
    register: calico_network

  - name: output of calico_network
    debug:
      msg: {{ calico_network.stdout | to_nice_yaml }}


  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: output of join_command
    debug: 
       msg: {{ join_command.stdout | to_nice_yaml }}

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"


